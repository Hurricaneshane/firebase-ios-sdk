// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Response message for BidiGenerateContent RPC call.
@available(iOS 15.0, macOS 12.0, macCatalyst 15.0, tvOS 15.0, watchOS 8.0, *)
enum BidiGenerateContentServerMessage {
  // Sent in response to a `BidiGenerateContentSetup` message from the client.
  case setupComplete

  // Content generated by the model in response to client messages.
  case serverContent(content: BidiGenerateContentServerContent)

  // Request for the client to execute the `function_calls` and return the
  // responses with the matching `id`s.
  // case toolCall(BidiGenerateContentToolCall)

  // Notification for the client that a previously issued
  // `ToolCallMessage` with the specified `id`s should have been not executed
  // and should be cancelled.
  // case toolCallCancellation(BidiGenerateContentToolCallCancellation)
}

@available(iOS 15.0, macOS 12.0, macCatalyst 15.0, tvOS 15.0, watchOS 8.0, *)
extension BidiGenerateContentServerMessage: Decodable {
  enum CodingKeys: CodingKey {
    case setupComplete
    case serverContent
  }

  init(from decoder: any Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)
    if let _ = try container.decodeIfPresent(
      BidiGenerateContentSetupComplete.self,
      forKey: .setupComplete
    ) {
      self = .setupComplete
    } else if let serverContent = try container.decodeIfPresent(
      BidiGenerateContentServerContent.self,
      forKey: .serverContent
    ) {
      self = .serverContent(content: serverContent)
    } else {
      throw DecodingError.typeMismatch(
        BidiGenerateContentServerMessage.self,
        DecodingError.Context(
          codingPath: container.codingPath,
          debugDescription: "Unsupported BidiGenerateContentServerMessage type.",
          underlyingError: nil
        )
      )
    }
  }
}
